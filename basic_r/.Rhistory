"Hello world"
x
x = "Hello world"
x
x = "Hello world";
"Hello world";
'Hello'
"Hello world"
#변수의 대입 : <- (alt + -), =
a <- 1
a <- 2
a <- 1
b <- 20
a <- "hello world"
a <- 3.14
# r의 연산자
a + b
a - b
a / b
a * b
a == b
a != b
a > b
a < b
a <- 10
a <- 3.14
# 패키지 설치
install.packages("ggplot2") #그래프를 그려주는 패키지
.libPaths("C:/Users/Hyerin/R")
.libPaths("C:/Users/Hyerin")
.libPaths("C:/Users")
# 패키지 설치
install.packages("ggplot2") #그래프를 그려주는 패키지
# 패키지 설치
install.packages("ggplot2") #그래프를 그려주는 패키지
test <- data.frame(c("a","b","c", "d", "e"), c(80, 54, 75, 34, 90))
test
test <- data.frame(user = c("a","b","c", "d", "e"),
score = c(80, 54, 75, 34, 90))
test
mean(test.score)
mean(test)
mean(score)
test <- c(80, 54, 75, 34, 90))
test <- c(80, 54, 75, 34, 90))
test <- c(80, 54, 75, 34, 90)
score <- c(80, 54, 75, 34, 90)
avg <- mean(score)
sum <- sum(score)
source('C:/Users/Hyerin/R/basic_r/code/01basic/script03(함수_패키지).R', encoding = 'UTF-8')
mpg
# 외부데이터 불러오기
getwd()
setwd("C:/Users/Hyerin/R/basic_r/data")
# 외부데이터 불러오기
getwd() # 현재 기준의 작업폴더 조회
setwd("C:/Users/Hyerin/R/basic_r") # 작업폴더 변경
# 외부데이터 불러오기
getwd() # 현재 기준의 작업폴더 조회
read.table("excel_exam.txt")
read.table("data/excel_exam.txt")
d1 <- read.table("data/excel_exam.txt")
class(d1)
d1 <- read.table("data/excel_exam.txt", header = T)
d1
read.delim("data/excel_exam.txt", sep = "\t")
read.delim("data/excel_exam.txt",header = T, sep = "\t")
# 데이터가 tap으로 구분된 파일을 읽을 때 사용.
d2 <- read.delim("data/excel_exam.txt",header = T, sep = "\t")
#
d3 <- read.csv("data/excel_exam.csv")
d3
class(d3)
str(d3)
# excel파일을 읽기 위해서 패키지설치
install.packages("readxl")
# excel파일을 읽기 위해서 패키지설치
install.packages("readxl")
library(readxl)
d4 <- read_excel("data/excel_exam.xlsx")
d4
class(d4)
d4 <- as.data.frame(d4)
class(d4) # 데이터프레임으로 변경이 필요
d4 <- read_excel("data/excel_exam.xlsx", col_names = F)
d4
d4 <- as.data.frame(d4)
d4
excel_exam <- read.delim("C:/Users/Hyerin/R/basic_r/data/excel_exam.txt", quote="")
View(excel_exam)
# excel에 순수한 데이터만 있을 경우, col_names = F 옵션을 넣습니다
# excel파일의 첫행이 데이터인 경우에는 col_names을 F로 선언해서 가지고 옵니다
d4 <- read_excel("data/excel_exam.xlsx")
d4 <- as.data.frame(d4)
library(readxl)
excel_exam <- read_excel("data/excel_exam.xlsx",
sheet = "Sheet1")
View(excel_exam)
d4
# 데이터 저장하기
name <- c("park", "kim", "lee", "choi", "hong")
kor <- c(10, 20, 30, 40, 50)
eng <- c(23, 45, 64, 34, 23)
data.frame(name, kor, eng)
d5 <- data.frame(name, kor, eng)
write.csv(d5, "data/export.csv")
write.csv(d5, file = "C:\\Users\\Hyerin\\R\\basic_r\\data\\export.csv")
library(ggplot2)
mpg
mpg <- as.data.frame(mpg)
mpg
# 데이터프레임 앞부분 확인
head(mpg)
head(mpg, 20)
# 데이터프레임 뒷부분 확인
tail(mpg)
tail(mpg, 20)
# 테이블 구조로 데이터 확인
View(mpg)
# 데이터프레인의 구조확인 str(), dim(), nrow(), ncol()
str(mpg)
dim(mpg)
nrow(mpg)
ncol(mpg)
summary(mpg)
colnames(mpg)
rownames(mpg)
# 요약통계산출 summary()
# 4분위수 - 데이터를 동일하게 4등분 했을 때 나온 위치
summary(mpg) #최소값, 1사분위수, 중앙값(2사분위수), 평균, 3사분위수, 최대값
library(ggplot2)
mpg <- as.data.frame(mpg)
mpg
mpg[3,]
mpg[1:3,]
mpg[15,]
mpg[15]
mpg[15,]
mpg[1:6,] # 1~6행 추출(연속형)
mpg[c(2,4,6),] # 2, 4, 6행 추출출
mpg[c(1~6, 8, 10), ]
mpg[c(1:6, 8, 10), ]
# 인덱싱을 활용한 데이터 추출
# 열데이터 추출 - 데이터명[,열index]
mpg[, 3]
mpg[, 10]
mpg[, 1:3]
mpg[, 7]
mpg[, 1:6]
mpg[, c(1,3)]
mpg[, c(1-3, 6)]
mpg[, c(1:3, 6)]
mpg[, c(1:3, 8, 10)]
mpg[, c(1:6, 8, 10)]
mpg[,"model"]
mpg[, c("model", "class")]
# 인덱싱을 활용한 데이터 행열추출
mpg[1,3]
# 인덱싱을 활용한 데이터 행열추출
head(mpg)
mpg[1:3, 2:3]
mpg[1:3, c("model", "displ")]
mpg[4:6, c("displ", "year", "trans")]
mpg[1:3, 1]
class(mpg[1:3,"model"])
is(mpg[1:3,"model"])
mpg[1:3,"model"]
str(mpg[1:3,"model"])
# 조건형식으로 데이터 추출
str(mpg)
mpg[mpg$model =="a"]
mpg$model
mpg$year
mpg[mpg$model >= 2008]
mpg$class
mpg[mpg$model == "suv"]
mpg[mpg$model == "suv",]
mpg[,mpg$model == "suv"]
mpg[mpg$model == "suv", ]
mpg[mpg$model == "suv", "year"]
mpg[mpg$model == "suv",]
# $연산을 이용해서 조건에 충족하는 행 추출
mpg[mpg$model == "a4",]
# ==============================================
# 데이터프레임에서 특정행에 대한 결과를 보려면 $컬럼명
# 조건형식으로 데이터 추출
str(mpg)
mpg[mpg$year >= 2000,]
mpg[mpg$cty > 20,]
mpg[mpg$cty >= 20,]
mpg[mpg$cty >= 20 & mpg$hwy >=30,]
#예제
fruts <- data.frame(c("제품", "가격", "판매량"),
c( c("사과", 1800, 24), c("딸기", 1500, 38), c("수박", 3000, 13)  ))
fruts
#예제
fruts <- data.frame( c( c("사과", 1800, 24), c("딸기", 1500, 38), c("수박", 3000, 13)  ))
fruts
#예제
fruts <- data.frame( c( c("제품", "가격", "판매량"), c("사과", 1800, 24), c("딸기", 1500, 38), c("수박", 3000, 13)  ))
fruts
# dataframe - 여러타입이 합쳐진 2차원 구조
data.frame(a = c(1, 2, 3),
b = c("park", "hong", "kim") ) # 각 변수를 행으로 나열
#예제
fruts <- data.frame( product = c("사과", "딸기", "수박"),
price = c(1800,1500,3000),
buy = c(24,38,13) )
fruts
# Q2
sum(fruts$price)
mean(fruts$price)
mean(fruts$buy)
sum(fruts$buy)
#예제
# Q1
fruit <- data.frame( product = c("사과", "딸기", "수박"),
price = c(1800,1500,3000),
buy = c(24,38,13) )
fruit
# Q2
sum(fruit$price) #과일가격 합계
mean(fruit$price) #과일가격 평균
sum(fruit$buy) #과일판매량 합계
mean(fruit$buy) #과일판매량 평균
rm(fruts)
class(fruit)
str(fruit)
exam <- read.csv("data/excel_exam.csv", stringsAsFactors = F)
str(exam)
exam
str(exam)
# 데이터 수정
# 수정할 데이터(행, 열) 추출 <- 수정할 값
exam[1, ]
# 데이터 수정
# 수정할 데이터(행, 열) 추출 <- 수정할 값
exam[1, ] <- 100
exam
exam[, ncol(exam)+1] <- "A"
exam
exam <- read.csv("data/excel_exam.csv", stringsAsFactors = F)
exam
exam[, ncol(exam)+1] <- sum(c(exam$math, exam$english, exam$science))
exam
# 데이터 수정
# 수정할 데이터[행, 열] <- 수정할 값
exam[1, ] <- 100
head(exam)
exam[c(1,3,5),] <- 100
head(exam)
#데이터 열 수정하기
exam[, exam$english] <- 50
#데이터 열 수정하기
exam[, "english"] <- 50
head(exam)
exam[, "english"] <- 700
exam[, "english"] <- 70
head(exam)
exam[10, "math"] <- 1000
head(exam,10)
# 데이터 열 추가하기
# 열 인덱스 or 열 이름을 이용해서 추가
exam[,6] <- "hello"
head(exam,10)
exam[, ncol(exam)+1] <- "bye"
head(exam,10)
# 컬럼명을 이용해서 추가
exam[, "xxx"] <- abc
# 컬럼명을 이용해서 추가
exam[, "xxx"] <- "abc"
head(exam,10)
exam[, exam$yyy] <- "aaa"
head(exam,10)
exam$yyy <- "aaa"
head(exam,10)
exam$yyy <- "yyy"
head(exam,10)
# 컬럼명수정
c(1:5)[1]
# 컬럼명수정
test <- c(1:5)
test[3]
# 컬럼명의 수정 - colnames()
colnames(exam)
# 컬럼명의 수정 - colnames()
colnames(exam)[6]
# 컬럼명의 수정 - colnames()
colnames(exam)[6] <- "xxx"
head(exam,10)
# 컬럼명의 수정 - colnames()
colnames(exam)[6] <- "zzz"
colnames(exam)[7] <- "kkk"
head(exam,10)
remove(exam$yyy)
# 행열의 삭제
exam[, -1]
head(exam,10)
# 연속적인 컬럼명수정, 전체컬럼 수정
colnames(exam)
# 연속적인 컬럼명수정, 전체컬럼 수정
colnames(exam)[6:9] <- c("a", "b", "c")
# 연속적인 컬럼명수정, 전체컬럼 수정
colnames(exam)[6:9] <- c("a", "b", "c", "d")
head(exam,10)
# 연속적인 컬럼명수정, 전체컬럼 수정
colnames(exam)[6:9] <- c("aaa", "bbb", "ccc", "ddd")
head(exam,10)
colnames(exam) <- c("a", "b", "c", "d", "e", "f", "g", "h", "i")
head(exam,10)
exam <- read.csv("data/excel_exam.csv", stringsAsFactors = F)
exam
exam$math
exam$english
exam$science
exam&total <- exam$math + exam$english +exam$science
exam$total <- exam$math + exam$english +exam$science
exam
exam$avg <- exam$total/3
exam
#평균이 70 이상은 합격 이하는 불합격
ifelse(exam$avg >= 60, TRUE, FALSE)
#평균이 60 이상은 "Y" 이하는 "N"
# ifelse(exam$avg >= 60, TRUE, FALSE)
exam$pass_fail <- ifelse(exam$avg >= 60, "Y", "N")
exam
head(exam,10)
# level컬럼명 추가 40이하는 row, 40~60은 middle, 60이상은 high
# 힌트: ifelse의 중첩
exam$levle <- ifelse(exam$avg < 40, "row", ifelse(exam$avg > 60, "high", "middle"))
head(exam,10)
head(exam,20)
exam
# level컬럼명 추가 40이하는 row, 40~60은 middle, 60이상은 high
# 힌트: ifelse의 중첩
exam$levle <- ifelse(exam$avg < 60, "row", ifelse(exam$avg > 80, "high", "middle"))
exam
# level컬럼명 추가 40이하는 row, 40~60은 middle, 60이상은 high
# 힌트: ifelse의 중첩
exam$levle <- ifelse(exam$avg < 60, "row", #평균 60미만
ifelse(exam$avg > 80, "high", "middle")) #평균 60이상
exam
mpg
library(ggplot2)
mpg <- as.data.frame()
mpg <- as.data.frame(mpg)
mpg
mpg[1:3, 1:4]
aaa <- mpg[1:3, 1:4]
bbb <- mpg[11:13, 1:4]
aaa
bbb
# 컬럽병합(가로병합) cbind()
cbind(aaa, bbb)
# 로우병합(세로병합) rbind()
rbind(aaa, bbb) #행병합합
ccc <- mpg[1:2, 1:5]
ddd <- mpg[11:12, 1:4]
ccc
ddd
aaa
ccc
cbind(aaa, ccc)
cbind(ccc, aaa)
rbind(aaa, ccc)
ddd <- mpg[1:2, 1:4]
aaa
ddd
ddd <- mpg[1:2, 1:5]
aaa
ddd
ddd <- mpg[1:3, 1:5]
aaa
ddd
rbind(aaa, ddd) #매치에러
# ==================================================
# 열데이터의 빈도수
table(mpg$model)
mpg
table(mpg$year)
table(mpg$manufacturer)
table(mpg$manufacturer, mpg$year)
hist(mpg$manufacturer)
# hist(빈도수)
hist(table(mpg$year) )
# hist(빈도수)
hist( table(mpg$manufacturer, mpg$year) )
# hist(빈도수)
hist( table(mpg$manufacturer) )
# hist(빈도수)
hist( table(mpg$model) )
# hist(빈도수) -- 빈도수를 그래프로 표현
hist( table(mpg$year) )
# hist(빈도수) -- 빈도수를 그래프로 표현
hist( table(mpg$model) )
# ==================================================
# 열데이터의 빈도수확인 table() -- 각 값의 count
# 2개 이상의 값은 다차원형식으로 나옴
table(mpg$model) # model데이터의 빈도수
hist( table(mpg$manufacturer) )
table(mpg$manufacturer)
# Q1. ggplot2 패키지의 mpg데이터를 사용할 수 있도록 불러온 뒤 복사본을 만드세요.
library(ggplot2)
mpg
mpg
mpgCopy <- as.data.frame(mpg)
mpgCopy
mpgCopy
# Q2. 복사본 데이터를 이용해서 cty는 city로, hwy는 highway로 변수명을 수정하세요.
colnames(mpgCopy)
# Q2. 복사본 데이터를 이용해서 cty는 city로, hwy는 highway로 변수명을 수정하세요.
colnames(mpgCopy)[8] #cty[8]
colnames(mpgCopy)[9] #hwy
# Q2. 복사본 데이터를 이용해서 cty는 city로, hwy는 highway로 변수명을 수정하세요.
colnames(mpgCopy)[8] <- "city" #cty
colnames(mpgCopy)[9] <- "highway" #hwy
mpgCopy
head(mpgCopy)
# Q3. 복사본 데이터를 이용해서 cty + hwy / 2의 total컬럼을만드세요.
mpgCopy$total <- (mpgCopy$city + mpgCopy$highway) / 2
head(mpgCopy)
# Q4. 컬럼 total의 평균을 출력하세요.
avg(mpgCopy$total)
# Q4. 컬럼 total의 평균을 출력하세요.
mean(mpgCopy$total)
mpgCopy
# Q5. total에 따른 파생변수 test를 생성합니다. (조건: total >= 20 이상 PASS 나머지 FAIL )
mpgCopy$test <- ifelse(mpgCopy$total >= 20, "PASS", "FAIL")
head(mpgCopy)
# Q6. total에 따른 파생변수 grade를 생성합니다. (24이상 A, 20이상 B, 나머지는 C )
mpgCopy$grade <- ifelse(mpgCopy$total >= 24, "A",
ifelse(mpgCopy$total >= 20, "B", "C") )
head(mpgCopy)
# Q7. 데이터 일부를 출력해서 변수명이 바뀌었는지 확인해 보세요. 아래와 같은 결과물이 출력되어야 합니다.
head(as.list.default(mpgCopy))
# Q7. 데이터 일부를 출력해서 변수명이 바뀌었는지 확인해 보세요. 아래와 같은 결과물이 출력되어야 합니다.
head(as.data(mpgCopy))
# Q7. 데이터 일부를 출력해서 변수명이 바뀌었는지 확인해 보세요. 아래와 같은 결과물이 출력되어야 합니다.
head(as.data.frame.AsIs(mpgCopy))
# Q7. 데이터 일부를 출력해서 변수명이 바뀌었는지 확인해 보세요. 아래와 같은 결과물이 출력되어야 합니다.
head(as.data.frame.list(mpgCopy))
# Q7. 데이터 일부를 출력해서 변수명이 바뀌었는지 확인해 보세요. 아래와 같은 결과물이 출력되어야 합니다.
head(as.data.frame.factor(mpgCopy))
# Q7. 데이터 일부를 출력해서 변수명이 바뀌었는지 확인해 보세요. 아래와 같은 결과물이 출력되어야 합니다.
head(as.data.frame(mpgCopy))
# Q7. 데이터 일부를 출력해서 변수명이 바뀌었는지 확인해 보세요. 아래와 같은 결과물이 출력되어야 합니다.
head(mpgCopy)
# ggplot2 패키지에는 미국 동북중부 437개 지역의 인구통계 정보를 담은 midwest라는 데이터가 포함되어 있습니다. midwest 데이터를 사용해 데이터 분석 문제를해결해보세요.
library(ggplot2)
midwest <- as.data.frame(midwest)
str(midwest)
tail(midwest) #끝부분분
tail(midwest) #끝부분
View(midwest)
summary(midwest)
dim(midwest)
# Q02. poptotal(전체인구)을total로, popasian(아시아인구)을asian으로변수명을수정하세요.
colnames(midwest)
# Q02. poptotal(전체인구)을total로, popasian(아시아인구)을asian으로변수명을수정하세요.
colnames(midwest)[5]
colnames(midwest)[10]
# Q02. poptotal(전체인구)을total로, popasian(아시아인구)을asian으로변수명을수정하세요.
colnames(midwest)[5] <- "total"
colnames(midwest)[10] <- "asian"
colnames(midwest)
# Q03. total, asian변수를이용해'전체인구대비아시아인구백분율' 파생변수를만들고, 히스토그램을 만들어도시들이 어떻게 분포하는지살펴보세요.
midwest$asian_percentage <- prop.table((midwest$asian / midwest$total)*100)
midwest
# Q03. total, asian변수를이용해'전체인구대비아시아인구백분율' 파생변수를만들고, 히스토그램을 만들어도시들이 어떻게 분포하는지살펴보세요.
midwest$asian_percentage <- (midwest$asian / midwest$total)*100
midwest
hist(table(midwest$asian_percentage))
hist(table(midwest$county, midwest$asian_percentage))
table(midwest$asian_percentage)
hist(table(midwest$asian_percentage))
plot(midwest$county,table(midwest$asian_percentage))
data(package = .packages(all.available = T))
hist(table(midwest$county))
table(midwest$county)
# Q04. 아시아인구백분율전체평균을구하고, 평균을초과하면"large", 그외에는"small"을부여하는 파생변수(group)을 만들어 보세요
avg <- mean(midwest$asian_percentage)
midwest$group <- ifelse(midwest$asian_percentage >= avg, "large", "small")
# Q05. group의 빈도수를 확인하세요
table(midwest$group)
hist(table(midwest$asian_percentage)
hist(table(midwest$asian_percentage)
hist(table(midwest$asian_percentage)
1
hist(table(midwest$asian_percentage))
table(midwest$asian_percentage)
hist(midwest$asian_percentage)
avg
