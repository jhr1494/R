geom_line(aes(x = date, y = uempmed), color = "blue") +
geom_hline(yintercept = mean(eco$psavert), color = "green") +
geom_vline(xintercept = as.Date("2010-12-31"), color = "pink") +
labs(title = "저축률 vs 실업률", x = "날짜", y = "저축률(실업률")
ggplot(eco, aes(x = date, y = psavert)) +
geom_line()
# x, y축을 그래프생성시 같이 사용할수 있습니다. -> 이런방식으로 겹치기가 가능
ggplot(eco) +
geom_line(aes(x = date, y = psavert))
# 기존방식
eco <- as.data.frame(economics)
# 저축률 vs 실업율
# hline() - 수평축(yintercepter에 축 위치)
# vline() - 수직축(xintercepter에 축 위치)
c <- ggplot(eco) +
geom_line(aes(x = date, y = psavert), color = "red") +
geom_line(aes(x = date, y = uempmed), color = "blue") +
geom_hline(yintercept = mean(eco$psavert), color = "green") +
geom_vline(xintercept = as.Date("2010-12-31"), color = "pink") +
labs(title = "저축률 vs 실업률", x = "날짜", y = "저축률(실업률")
library(gridExtra)
grid.arrange(a,b,c, nrow = 2, ncol = 2)
grid.arrange(a,b,c, nrow = 2, ncol = 2)
# 하나의데이터를 점과 라인으로 표현
# 저축률 vs 실업율
a <- ggplot(eco) +
geom_line(aes(x = date, y = psavert), color = "red") +
geom_line(aes(x = date, y = uempmed), color = "blue")
# line과 point
b <- ggplot(eco) +
geom_line(aes(x = date, y = psavert), color = "red") +
geom_point(aes(x = date, y = psavert), size = 0.1)
# 저축률 vs 실업율
# hline() - 수평축(yintercepter에 축 위치)
# vline() - 수직축(xintercepter에 축 위치)
c <- ggplot(eco) +
geom_line(aes(x = date, y = psavert), color = "red") +
geom_line(aes(x = date, y = uempmed), color = "blue") +
geom_hline(yintercept = mean(eco$psavert), color = "green") +
geom_vline(xintercept = as.Date("2010-12-31"), color = "pink") +
labs(title = "저축률 vs 실업률", x = "날짜", y = "저축률(실업률")
# step2 - grid.arrange() 함수안에 표현
grid.arrange(a,b,c, nrow = 1, ncol = 3)
# step2 - grid.arrange() 함수안에 표현
grid.arrange(a,b,c, nrow = 1, ncol = 3)
grid.arrange(a,b,c, nrow = 2, ncol = 2)
grid.arrange(a,b,c, nrow = 3, ncol = 1)
# step1 - 각각의 그래프를 변수에 저장
a
b
c
# [문항1]  주택도시보증공사에서 제공하는 민간아파트 분양가격 동향 데이터를 분석하려 합니다.
# 해당 csv파일을 읽어 들어와 예시와 같이 컬럼명을 변경하세요.
data <- read.csv("data/주택도시보증공사_전국 평균 분양가격(2020년 2월).csv")
data <- rename(data, "region" = "지역명",
"area" = "규모구분",
"year" = "연도",
"month" = "월",
"price" = "분양가격...")
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
test %>%
filter(!is.na(price)) %>%
group_by(year) %>%
summarise(mean_price = mean(price))
test <- data %>%
filter(!area == "전체") %>%
mutate(area_lv = ifelse(area == "전용면적 60㎡이하", "A",
ifelse(area == "전용면적 60㎡초과 85㎡이하", "B",
ifelse(area == "전용면적 85㎡초과 102㎡이하", "C","D"
))))
test
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
test %>%
filter(!is.na(price)) %>%
group_by(year) %>%
summarise(mean_price = mean(price))
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
test %>%
filter(!is.na(price)) %>%
group_by(year, month) %>%
summarise(mean_price = mean(price))
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
library(gridExtra)
ggplot(t4) +
geom_line(x = year, y = mean_price)
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
t4 <- test %>%
filter(!is.na(price)) %>%
group_by(year, month) %>%
summarise(mean_price = mean(price))
ggplot(t4) +
geom_line(x = year, y = mean_price)
t4
ggplot(t4) +
geom_line(aes(x = year, y = mean_price))
ggplot(t4) +
geom_line(aes(x = year, y = price))
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
t4 <- test %>%
filter(!is.na(price)) %>%
group_by(year, month, price) %>%
summarise(mean_price = mean(price))
t4
ggplot(t4) +
geom_line(aes(x = year, y = price))
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
t4 <- test %>%
filter(!is.na(price)) %>%
group_by(year, month) %>%
summarise(mean_price = mean(price))
t4
t4
ggplot(t4) +
geom_line(aes(x = year, y = mean_price, ))
ggplot(t4) +
geom_line(aes(x = month, y = mean_price, ))
ggplot(t4) +
geom_line(aes(x = year, y = mean_price, ))
ggplot(t4) +
geom_line(aes(x = year, y = mean_price, fill = month ))
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
t4 <- test %>%
filter(!is.na(price)) %>%
group_by(month, year) %>%
summarise(mean_price = mean(price))
ggplot(t4) +
geom_line(aes(x = year, y = mean_price))
t4
ggplot(t4) +
geom_line(aes(x = month, y = mean_price))
ggplot(t4) +
geom_line(aes(x = year, y = mean_price))
test
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
t4 <- test %>%
filter(!is.na(price) & region = "서울울") %>%
group_by(month, year) %>%
summarise(mean_price = mean(price))
test
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
t4 <- test %>%
filter(!is.na(price) & region = "서울") %>%
group_by(month, year) %>%
summarise(mean_price = mean(price))
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
t4 <- test %>%
filter(!is.na(price) & region == "서울") %>%
group_by(month, year) %>%
summarise(mean_price = mean(price))
t4
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
t4 <- test %>%
filter(!is.na(price) & region == "서울") %>%
group_by(month, year) %>%
summarise(mean_price = mean(price))
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
test %>%
filter(!is.na(price) & region == "서울") %>%
group_by(month, year) %>%
summarise(mean_price = mean(price))
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
test %>%
filter(!is.na(price) & region == "서울") %>%
group_by(year, month) %>%
summarise(mean_price = mean(price))
ggplot(t4) +
geom_line(aes(x = year, y = mean_price))
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
t4 <- test %>%
filter(!is.na(price) & region == "서울") %>%
group_by(year, month) %>%
summarise(mean_price = mean(price))
t4
ggplot(t4) +
geom_line(aes(x = year, y = mean_price))
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
t4 <- test %>%
filter(!is.na(price) & region == "서울") %>%
group_by(month) %>%
summarise(mean_price = mean(price))
t4
ggplot(t4) +
geom_line(aes(x = year, y = mean_price))
ggplot(df, aes(x = date, y = num) ) +
geom_line()
# 날짜별 데이터프레임
df <- data.frame(date, num)
ggplot(df, aes(x = date, y = num) ) +
geom_line()
ggplot(eco, aes(x = date, y = psavert)) +
geom_line(color = 'red')
ggplot(eco, aes(x = date, y = psavert)) +
geom_line(color = 'blue')
ggplot(t4) +
geom_line(aes(x = month, y = mean_price))
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
t4 <- test %>%
filter(!is.na(price) & region == "서울") %>%
group_by(month) %>%
summarise(mean_price = mean(price))
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
t4 <- test %>%
filter(!is.na(price) & region == "서울") %>%
group_by(month)
t4
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
t4 <- test %>%
filter(!is.na(price) & region == "서울") %>%
group_by(month) %>%
summarise(mean_price = mean(price))
t4
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
t4 <- test %>%
filter(!is.na(price) & region == "서울") %>%
group_by(year,month) %>%
summarise(mean_price = mean(price))
t4
ggplot(t4) +
geom_line(aes(x = month, y = mean_price))
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
test %>%
filter(!is.na(price) & region == "서울") %>%
group_by(year,month) %>%
summarise(mean_price = mean(price)) %>%
mutate(date = as.Date("year-month-01"))
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
test %>%
filter(!is.na(price) & region == "서울") %>%
mutate(date = as.Date("year-month-01"))
mutate(date = as.Date(paste(year, month, 01, sep = "-"))
mutate(date = as.Date(paste(year, month, "01", sep = "-"))
mutate(date = paste(year, month, "01", sep = "-")
# [문항1]  주택도시보증공사에서 제공하는 민간아파트 분양가격 동향 데이터를 분석하려 합니다.
# 해당 csv파일을 읽어 들어와 예시와 같이 컬럼명을 변경하세요.
data <- read.csv("data/주택도시보증공사_전국 평균 분양가격(2020년 2월).csv")
test <- data %>%
filter(!area == "전체") %>%
mutate(area_lv = ifelse(area == "전용면적 60㎡이하", "A",
ifelse(area == "전용면적 60㎡초과 85㎡이하", "B",
ifelse(area == "전용면적 85㎡초과 102㎡이하", "C","D"
))))
mutate(date = paste(year, month, "01", sep = "-") %>%
test
filter(!is.na(price) & region == "서울")
mutate(date = paste(year, month, "01", sep = "-")
filter(!is.na(price) & region == "서울")
test
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
test
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
test %>%
filter(!is.na(price) & region == "서울")
filter(!is.na(price) & region == "서울") %>%
1
mutate(date = paste(year, month, "01", sep = "-")
1
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
test %>%
filter(!is.na(price) & region == "서울") %>%
paste(year, month, "01", sep = "-")
paste(test$year, test$month, "01", sep = "-")
test$date = paste(test$year, test$month, "01", sep = "-")
test
test %>%
as.Date(date)
test %>%
filter(!is.na(price) & region == "서울")
test %>%
filter(!is.na(price) & region == "서울") %>%
group_by(date)
test %>%
filter(!is.na(price)) %>%
group_by(date)
test %>%
filter(!is.na(price)) %>%
group_by(date)
test %>%
filter(!is.na(price)) %>%
group_by(date) %>%
summarise(mean_price = mean(price))
t4 <- test %>%
filter(!is.na(price)) %>%
group_by(date) %>%
summarise(mean_price = mean(price))
ggplot(t4) +
geom_line(aes(x = date, y = mean_price))
ggplot(t4) +
geom_line(aes(x = year, y = mean_price))
t4
t4 <- test %>%
filter(!is.na(price)) %>%
group_by(date) %>%
summarise(mean_price = mean(price)) %>%
as.Date(date)
str(t4)
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
test$date = paste(test$year, test$month, "01", sep = "-")
str(t4)
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
test %>%
mutate(date = as.Date(str_c(year, ifelse(month < 10, str_c(0,month), month ), 01, sep = "-") ))
# [문항7]  연도별 아파트 평당분양가 변화동향을 시계열그래프로 시각화하여 제출하세요.
library(stringr)
test %>%
mutate(date = as.Date(str_c(year, ifelse(month < 10, str_c(0,month), month ), 01, sep = "-") ))
str(t4)
t4 <- test %>%
filter(!is.na(price)) %>%
group_by(date) %>%
summarise(mean_price = mean(price))
t4
str(t4)
t4 <- test %>%
mutate(date = as.Date(str_c(year, ifelse(month < 10, str_c(0,month), month ), 01, sep = "-") )) %>%
filter(!is.na(price)) %>%
group_by(date) %>%
summarise(mean_price = mean(price))
t4 <- test %>%
str(t4)
t4
t4
test %>%
mutate(date = as.Date(str_c(year, ifelse(month < 10, str_c(0,month), month ), 01, sep = "-") ))
test <- test %>%
mutate(date = as.Date(str_c(year, ifelse(month < 10, str_c(0,month), month ), 01, sep = "-") ))
str(test)
t4 <- test %>%
filter(!is.na(price)) %>%
group_by(date) %>%
summarise(mean_price = mean(price))
str(t4)
ggplot(t4) +
geom_line(aes(x = date, y = mean_price))
t4$date
t4 <- test %>%
filter(!is.na(price)& region == "서울") %>%
group_by(date) %>%
summarise(mean_price = mean(price))
ggplot(t4) +
geom_line(aes(x = date, y = mean_price))
ggplot(t4) +
geom_line(aes(x = date, y = mean_price)) +
geom_hline(yintercept = mean(t4$mean_price), color = "green")
ggplot(t4) +
geom_line(aes(x = date, y = mean_price), color = "red") +
geom_hline(yintercept = mean(t4$mean_price), color = "green")
ggplot(t4) +
geom_line(aes(x = date, y = mean_price), color = "red") +
geom_hline(yintercept = mean(t4$mean_price), color = "green") +
lebs(title = "연도별 아파트분양가 변화동향(서울)", x = "연도", y = "평당분양가격 평균")
ggplot(t4) +
geom_line(aes(x = date, y = mean_price), color = "red") +
geom_hline(yintercept = mean(t4$mean_price), color = "green") +
lebs(title = "연도별 아파트분양가 변화동향(서울)", x = "연도", y = "평당분양가격 평균")
ggplot(t4) +
geom_line(aes(x = date, y = mean_price), color = "red") +
geom_hline(yintercept = mean(t4$mean_price), color = "green") +
labs(title = "연도별 아파트분양가 변화동향(서울)", x = "연도", y = "평당분양가격 평균")
# github 버전 설치
install.packages("remotes")
install.packages("remotes")
# 64bit 에서만 동작합니다.
remotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts=c("--no-multiarch"))
library(KoNLP) #확인 -> 없는 패키지 설치후 재 업로드
useNIADic() #사전 업로드
library(KoNLP) #확인 -> 없는 패키지 설치후 재 업로드
useNIADic() #사전 업로드
library(rlang)
install.packages("rlang")
install.packages("rlang")
useNIADic() #사전 업로드
library(KoNLP) #확인 -> 없는 패키지 설치후 재 업로드
library(rlang)
install.packages("rlang")
library(rlang)
install.packages("rlang")
library(rlang)
install.packages("rlang")
install.packages("rlang")
library(rlang)
install.packages("rlang")
library(rlang)
install.packages("rlang")
install.packages("rlang")
library(rlang)
useNIADic() #사전 업로드
library(KoNLP) #확인 -> 없는 패키지 설치후 재 업로드
useNIADic() #사전 업로드
useNIADic() #사전 업로드
# 위 설치 완료 후에 확인
library(KoNLP)
#=============================================
# 1. 데이터를 한줄씩 읽습니다.
song <- readLines("data/song.txt")
song
# 2. stringr패키지를 이용해서 특수문자를 제거
library(stringr)
str_replace_all(song, "\\W", " ")
song <- str_replace_all(song, "\\W", " ")
# 3. 문장에서 명사를 추출하는 extractNoun()
extractNoun("동해물과 백두산이 마르고 닳도록 하느님이 보우하사 우리나라 만세")
# 3. 명사추출
song_list <- extractNoun(song)
song_list
# 4. unlist함수를 이용해서 vector형으로 형변환
song_vector <- unlist(song_list)
song_vector
class(song_vector)
class(song_list)
# vector형에서 분석을 위해 dataframe으로 변경
song_df <- as.data.frame(song_vector)
song_df
head(song_df)
# 6. 분석을 위한 컬럼명 변경
library(dplyr)
rename(song_df, word = song_vec)
song_df <- rename(song_df, word = song_vec)
head(song_df)
song_df <- rename(song_df, word = song_vector)
head(song_df)
# 7. 분석(단어의 자주사용된 빈도를 내림차순으로 정렬)
song_df %>%
group_by(word) %>%
summarise(feq = n())
# 7. 분석(단어의 자주사용된 빈도를 내림차순으로 정렬)
song_df %>%
filter(nchar(word) >= 2) %>%
group_by(word) %>%
summarise(feq = n()) %>%
arrange(desc(feq))
# 7. 분석(단어의 자주사용된 빈도를 내림차순으로 정렬)
result <- song_df %>%
filter(nchar(word) >= 2) %>%
group_by(word) %>%
summarise(feq = n()) %>%
arrange(desc(feq))
View(result)
# woedcloud 설치
install.packages("wordcloud")
library(wordcloud)
library(RColorBrewer)
library(wordcloud)
# 색상목록을 추출
?brewer.pal
brewer.pal(8, "Accent")
color <- brewer.pal(12, "set3")
color <- brewer.pal(12, "Set3")
song_vector
wordcloud(words = result$word,
freq = result$feq,
min.freq = 2, #최소단어빈도
max.words = 200, #최대단어빈도
random.order = F, #default : DESC
rot.per = 0.1,
scale = c(4, 0.5), #단어의크기
colors = color
)
wordcloud(words = result$word,
freq = result$feq,
min.freq = 2, #최소단어빈도
max.words = 200, #최대단어빈도
random.order = T, #고빈도 단어 중앙배치(F는 중앙배치)---default : DESC
rot.per = 0.1,
scale = c(4, 0.5), #단어의크기
colors = color
)
wordcloud(words = result$word,
freq = result$feq,
min.freq = 2, #최소단어빈도
max.words = 200, #최대단어빈도
random.order = F, #고빈도 단어 중앙배치(F는 중앙배치)---default : DESC
rot.per = 0.1,
scale = c(4, 0.5), #단어의크기
colors = color
)
wordcloud(words = result$word,
freq = result$feq,
min.freq = 2, #최소단어빈도
max.words = 200, #최대단어빈도
random.order = F, #고빈도 단어 중앙배치(F는 중앙배치)---default : DESC
rot.per = 0.1, #회전 단어 비율
scale = c(4, 0.5), #단어의크기
colors = color
)
color <- brewer.pal(8, "Accent")
wordcloud(words = result$word,
freq = result$feq,
min.freq = 2, #최소단어빈도
max.words = 200, #최대단어빈도
random.order = F, #고빈도 단어 중앙배치(F는 중앙배치)---default : DESC
rot.per = 0.1, #회전 단어 비율
scale = c(4, 0.5), #단어의크기
colors = color
)
wordcloud(words = result$word,
freq = result$feq,
min.freq = 2, #최소단어빈도
max.words = 200, #최대단어빈도
random.order = F, #고빈도 단어 중앙배치(F는 중앙배치)---default : DESC
rot.per = 0.1, #회전 단어 비율
scale = c(4, 0.3), #단어의크기
colors = color
)
wordcloud(words = result$word,
freq = result$feq,
min.freq = 2, #최소단어빈도
max.words = 200, #최대단어빈도
random.order = F, #고빈도 단어 중앙배치(F는 중앙배치)---default : DESC
rot.per = 0.1, #회전 단어 비율
scale = c(3, 0.3), #단어의크기
colors = color
)
