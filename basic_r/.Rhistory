filter(!is.na(hwy)) %>%
summarise(avg = mean(hwy)) %>%
arrange(avg)
# Q2
# filter() 를 이용해서 결측치를 제거하고 어떤 구동 방식 평균이 높은지 그룹별로 확인하고 차순정렬하세요
mpg %>%
group_by(drv) %>%
filter(!is.na(hwy)) %>%
summarise(avg = mean(hwy)) %>%
arrange(desc(avg))
data.frame(gender = c(1, 2, 1, 1, 3),
score = c(12, 43, 65, 54, 23))
d1 <- data.frame(gender = c(1, 2, 1, 1, 3),
score = c(12, 43, 65, 54, 23))
d1
table(d1$gender) #일반적인 빈도보다 확연히 적다면, 이상치로 판단합니다다
# 이상치를 NA값으로 변경
d1$gender <- ifelse(d1$gender == 3, NA, d1$gender)
d1
summarise(gender_mean = mean(score))
# NA값을 제거하고 분석
d1 %>%
filter(is.na(gender)) %>%
group_by(gender) %>%
summarise(gender_mean = mean(score))
# NA값을 제거하고 분석
d1 %>%
filter(!is.na(gender)) %>%
group_by(gender) %>%
summarise(gender_mean = mean(score))
boxplot(mpg$hwy)
boxplot(mpg$hwy)$stats
# 극단치 경계가 12, 37이기 때문에 초과, 미만데이터는 NA처리
ifelse(mpg$hwy < 12 | mpg$hwy > 37, NA, mpg%hwy)
# 극단치 경계가 12, 37이기 때문에 초과, 미만데이터는 NA처리
mpg$hwy <- ifelse(mpg$hwy < 12 | mpg$hwy > 37, NA, mpg$hwy)
table(is.na(mpg$hwy))
mpg <- as.data.frame(mpg)
table(is.na(mpg$hwy))
rm(mpg)
mpg <- as.data.frame(mpg)
table(is.na(mpg$hwy))
# 극단치 경계가 12, 37이기 때문에 초과, 미만데이터는 NA처리
mpg$hwy <- ifelse(mpg$hwy < 12 | mpg$hwy > 37, NA, mpg$hwy)
table(is.na(mpg$hwy))
# NA는 제거후에 분석
mpg %>%
filter(!is.na(mpg)) %>%
group_by(drv) %>%
summarise(mean_der = mean(hwy))
mpg$hwy <- ifelse(mpg$hwy < 12 | mpg$hwy > 37, NA, mpg$hwy)
table(is.na(mpg$hwy))
# NA는 제거후에 분석
mpg %>%
filter(!is.na(mpg)) %>%
group_by(drv) %>%
summarise(mean_der = mean(hwy))
# NA는 제거후에 분석
mpg %>%
filter(!is.na(hwy)) %>%
group_by(drv) %>%
summarise(mean_der = mean(hwy))
# =====================================
# 문제
# ggplot2에 존재하는 mpg데이터를 사용합니다
# mpg데이터를 다음 구문으로 불러와서 이상치를 생성하세요.
mpg <- as.data.frame(ggplot2::mpg)
# =====================================
# 문제
# ggplot2에 존재하는 mpg데이터를 사용합니다
# mpg데이터를 다음 구문으로 불러와서 이상치를 생성하세요.
mpg <- as.data.frame(ggplot2::mpg)
mpg[ c(10, 14, 58, 93), "drv" ] <- "k"
mpg[ c(29, 43, 129, 203), "cty"] <- c(3,4,39,42)
str(mpg)
# Q1
# .drv에 이상치가 있는지 확인 합니다. 이상치를 결측치로 처리한 다음 확인하세요.
boxplot(mpg$drv)
# Q1
# .drv에 이상치가 있는지 확인 합니다. 이상치를 결측치로 처리한 다음 확인하세요.
table(mpg$drv)
ifelse(mpg$drv != c("4", "f", "r"), NA, mpg$drv) %>%
table(filter(!is.na(mpg$drv) ))
ifelse(mpg$drv != c("4", "f", "r"), NA, mpg$drv)
ifelse(mpg$drv == "k", NA, mpg$drv)
table(filter(!is.na(mpg$drv) ))
table(mpg$drv,filter(!is.na(mpg$drv)))
table(filter(mpg$drv,!is.na(mpg$drv)))
table(mpg$drv)
ifelse(mpg$drv == "k", NA, mpg$drv) %>%
table(mpg$drv)
mpg$drv <- ifelse(mpg$drv == "k", NA, mpg$drv) %>%
table(mpg$drv)
mpg$drv <- ifelse(mpg$drv == "k", NA, mpg$drv)
table(mpg$drv)
table(mpg$drv)
mpg$drv
table(is.na(mpg$drv))
table(mpg$drv)
# Q2
# boxplot을 이용해서 cty의 이상치 범위를 확인하고 통계치를 이용해서 벗어난 값을 결측처리 한 후
# 다시 boxplot을 만들어서 확인하세요.
boxplot(cty)
# Q2
# boxplot을 이용해서 cty의 이상치 범위를 확인하고 통계치를 이용해서 벗어난 값을 결측처리 한 후
# 다시 boxplot을 만들어서 확인하세요.
boxplot(mpg$cty)
# Q2
# boxplot을 이용해서 cty의 이상치 범위를 확인하고 통계치를 이용해서 벗어난 값을 결측처리 한 후
# 다시 boxplot을 만들어서 확인하세요.
boxplot(mpg$cty).state
# Q2
# boxplot을 이용해서 cty의 이상치 범위를 확인하고 통계치를 이용해서 벗어난 값을 결측처리 한 후
# 다시 boxplot을 만들어서 확인하세요.
boxplot(mpg$cty)$stats
mpg$cty %>%
ifelse(cty < 9 | cty > 26, NA, cty)
ifelse(mpg$cty < 9 | mpg$cty > 26, NA, mpg$cty)
mpg$cty <- ifelse(mpg$cty < 9 | mpg$cty > 26, NA, mpg$cty)
boxplot(mpg$cty)$stats
boxplot(mpg$cty)
# Q3
# drv와 cty의 이상치를 결측처리 했다면, 결측치를 제외한 다음 drv별 cty평균이 어떻게 다른지 확인하세요.
# 파이프라인을 사용합니다. (그룹핑)
mpg %>%
filter(!is.na(drv))
# Q3
# drv와 cty의 이상치를 결측처리 했다면, 결측치를 제외한 다음 drv별 cty평균이 어떻게 다른지 확인하세요.
# 파이프라인을 사용합니다. (그룹핑)
mpg %>%
filter(drv, !is.na(drv))
# Q3
# drv와 cty의 이상치를 결측처리 했다면, 결측치를 제외한 다음 drv별 cty평균이 어떻게 다른지 확인하세요.
# 파이프라인을 사용합니다. (그룹핑)
mpg %>%
filter(!is.na(drv))
# Q3
# drv와 cty의 이상치를 결측처리 했다면, 결측치를 제외한 다음 drv별 cty평균이 어떻게 다른지 확인하세요.
# 파이프라인을 사용합니다. (그룹핑)
library(dplyr)
mpg %>%
filter(!is.na(drv))
library(ggplot2)
# Q3
# drv와 cty의 이상치를 결측처리 했다면, 결측치를 제외한 다음 drv별 cty평균이 어떻게 다른지 확인하세요.
# 파이프라인을 사용합니다. (그룹핑)
mpg %>%
filter(!is.na(drv))
# Q3
# drv와 cty의 이상치를 결측처리 했다면, 결측치를 제외한 다음 drv별 cty평균이 어떻게 다른지 확인하세요.
# 파이프라인을 사용합니다. (그룹핑)
mpg %>%
filter(!is.na(drv), !is.na(cty))
# Q3
# drv와 cty의 이상치를 결측처리 했다면, 결측치를 제외한 다음 drv별 cty평균이 어떻게 다른지 확인하세요.
# 파이프라인을 사용합니다. (그룹핑)
mpg %>%
filter(!is.na(drv), !is.na(cty)) %>%
group_by(drv) %>%
summarise(mean_cty = mean(cty))
# Q3
# drv와 cty의 이상치를 결측처리 했다면, 결측치를 제외한 다음 drv별 cty평균이 어떻게 다른지 확인하세요.
# 파이프라인을 사용합니다. (그룹핑)
mpg %>%
filter(!is.na(drv)) %>%
group_by(drv) %>%
summarise(mean_cty = mean(cty))
, !is.na(cty)
# Q3
# drv와 cty의 이상치를 결측처리 했다면, 결측치를 제외한 다음 drv별 cty평균이 어떻게 다른지 확인하세요.
# 파이프라인을 사용합니다. (그룹핑)
mpg %>%
filter(!is.na(drv), !is.na(cty)) %>%
group_by(drv) %>%
summarise(mean_cty = mean(cty))
# install.packages("ggplot2")
library(ggplot2)
mpg <- as.data.frame(mpg)
mpg <- as.data.frame(mpg)
ggplot(data = mpg, aes(x = displ, y = hwy))
# 2단계
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
# 3단계 - 데이터 표시 옵션설정
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(color = "red", size = 0.1)
# 4단계 - 부가옵션설정
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(color = "red", size = 0.1) + xlim(5,7)
# 시각화 함수들의 중첩이 길어지면 줄바꿈 → '+'가 마지막에 있도록 처리합니다
ggplot(mpg, aes(x = displ, y = cty)) +
geom_point() +
xlim(5,7) +
ylim(10,30)
# scales를 이용해서 제목과 축설정
# 1st
ggplot(mpg, aes(x = displ, y = cty)) +
geom_point() +
xlab("x축 제목") +
ylab("y축 제목") +
ggtitle("이건 제목입니다다")
# 2nd
ggplot(mpg, aes(x = cty, y = hwy)) +
# 2nd
ggplot(mpg, aes(x = cty, y = hwy)) +
# scales를 이용해서 제목과 축설정
# 1st
ggplot(mpg, aes(x = cty, y = hwy)) +
geom_point() +
xlab("x축 제목") +
ylab("y축 제목") +
ggtitle("이건 제목입니다다")
# scales를 이용해서 제목과 축설정
# 1st
ggplot(mpg, aes(x = cty, y = hwy)) +
geom_point() +
xlab("x축 제목") +
ylab("y축 제목") +
ggtitle("이건 제목입니다다")
# 2nd
ggplot(mpg, aes(x = cty, y = hwy)) +
geom_point() +
labs(title = "제목", x = "x축", y = "y축축")
# 2nd
ggplot(mpg, aes(x = cty, y = hwy)) +
geom_point() +
labs(title = "제목", x = "x축", y = "y축")
# aes축에 color값을 고정으로 지정 or data별로 지정
ggplot(mpg, aes(x = cty, y = hwy, color = cyl)) +
geom_point()
library(ggplot2)
library(dplyr)
mpg <- as.data.frame(mpg)
# drv별 cty(고속도로)연비 평균
d1 <- mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy, na.rm = T))
ggplot(d1, aes(x = drv, y = mean_hwy)) +
geom_col()
# reorder는 (정렬하고 싶은변수, 연속형변수)
ggplot(d1, aes(x = reorder(drv, -mean_hwy), y = mean_hwy)) +
geom_col()
ggplot(d1, aes(x = drv, y = mean_hwy)) +
geom_col()
# reorder는 (정렬하고 싶은변수, 연속형변수)
ggplot(d1, aes(x = reorder(drv, -mean_hwy), y = mean_hwy)) +
geom_col()
# 제조사별 hwy평균
d2 <- mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
# 제조사별 hwy평균
d2 <- mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
d2
# 제조사별 hwy평균
d2 <- mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy))
d2
as.data.frame(d2)
ggplot(d2, x = reorder(manufacturer, -mean_hwy), y = mean_hwy)) +
geom_col()
# 제조사별 hwy평균
d2 <- mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy, na.rm = T))
as.data.frame(d2)
ggplot(d2, x = reorder(manufacturer, -mean_hwy), y = mean_hwy)) +
geom_col()
# 제조사별 hwy평균
d2 <- mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy))
as.data.frame(d2)
ggplot(d2, x = reorder(manufacturer, -mean_hwy), y = mean_hwy)) +
geom_col()
ggplot(d2, x = reorder(manufacturer, -mean_hwy), y = mean_hwy)) +
geom_col()
ggplot(d2, x = reorder(manufacturer, -mean_hwy), y = mean_hwy) +
geom_col()
ggplot(d2, x = reorder(manufacturer, -mean_hwy), y = mean_hwy) +
geom_col()
ggplot(d2, aes(x = reorder(manufacturer, -mean_hwy), y = mean_hwy)) +
geom_col()
ggplot(mpg, aes(x = drv)) +
geom_bar()
# class별 빈도
ggplot(mpg, aes(x = class, fill = drv)) +
geom_bar()
# class별 빈도
ggplot(mpg, aes(x = class, fill = manufacturer)) +
geom_bar()
# class별 빈도
ggplot(mpg, aes(x = class, fill = manufacturer)) +
geom_bar()
ggplot(mpg, aes(x = drv, fill = model)) +
geom_bar()
# 구동방식별 fl
ggplot(mpg, aes(x = dtv, fill = fl)) +
geom_bar()
# 구동방식별 fl
ggplot(mpg, aes(x = drv, fill = fl)) +
geom_bar()
# 구동방식별 fl(연료) 누적열을 분리
ggplot(mpg, aes(x = drv, fill = fl)) +
geom_bar(position = "dodge")
ggplot(mpg, aes(x = model, fill = model)) +
geom_bar()
ggplot(mpg, aes(x = model, fill = model)) +
geom_bar() +
coord_flip()
# 그래프의 비율을 표기하는 원형차트로의 변경 coord_polar()
ggplot(mpg, aes(x = manufaceturnr, fill = drv)) +
geom_bar()
# 그래프의 비율을 표기하는 원형차트로의 변경 coord_polar()
ggplot(mpg, aes(x = manufacturnr, fill = drv)) +
geom_bar()
# 그래프의 비율을 표기하는 원형차트로의 변경 coord_polar()
ggplot(mpg, aes(x = manufacturer, fill = drv)) +
geom_bar()
# 그래프의 비율을 표기하는 원형차트로의 변경 coord_polar()
ggplot(mpg, aes(x = manufacturer, fill = drv)) +
geom_bar() +
coord_polar()
# 구동방식별 모델
ggplot(mpg, aes(x = drv, fill = model)) +
geom_bar() +
coord_polar()
# 구동방식별 연료
ggplot(mgp, aes(x = drv, fill = fl)) +
geom_bar()
# 구동방식별 연료
ggplot(mpg, aes(x = drv, fill = fl)) +
geom_bar()
# 구동방식별 연료
ggplot(mpg, aes(x = drv, fill = fl)) +
geom_bar() +
coord_polar()
ggplot(mpg, aes(x = factor(hwy), fill = drv) ) +
geom_bar()
ggplot(mpg, aes(x = hwy, fill = drv) ) +
geom_bar()
# 빈 자료는 빈공간으로 표시
ggplot(mpg, aes(x = hwy, fill = drv) ) +
geom_bar()+
coord_polar()
# 빈 공간은 사라짐
ggplot(mpg, aes(x = factor(hwy), fill = drv) ) +
geom_bar()+
coord_polar()
ggplot(mpg, aes(x = factor(drv), fill = model) ) +
geom_bar()+
coord_polar()
ggplot(mpg, aes(x = factor(drv), fill = model) ) +
geom_bar()+
coord_polar(theta = "y")
ggplot(mpg, aes(x = drv, fill = model) ) +
geom_bar()+
coord_polar(theta = "y")
ggplot(mpg, aes(x = drv, fill = model) ) +
geom_bar(position = "fill")+
coord_polar(theta = "y")
ggplot(mpg, aes(x = drv, fill = fl)) +
geom_bar(position = "fill")
ggplot(mpg, aes(x = drv, fill = model) ) +
geom_bar(position = "fill")+
coord_polar(theta = "y")
ggplot(mpg, aes(x = drv, fill = model) ) +
geom_bar(position = "fill")+
coord_polar(theta = "y",direction = 1)
ggplot(mpg, aes(x = drv, fill = model) ) +
geom_bar(position = "fill")+
coord_polar(theta = "y")
ggplot(mpg, aes(x = 1, fill = model) ) +
geom_bar(position = "fill")+
coord_polar(theta = "y")
ggplot(mpg, aes(x = 1, fill = fl) ) +
geom_bar(position = "fill")+
coord_polar(theta = "y")
ggplot(mpg, aes(x = 1, fill = class) ) +
geom_bar(position = "fill")+
coord_polar(theta = "y")
ggplot(mpg, aes(x = 1, fill = drv) ) +
geom_bar(position = "fill")+
coord_polar(theta = "y")
ggplot(mpg, aes(x = 1, fill = drv) ) +
geom_bar(position = "fill")+
ggplot(mpg, aes(x = 1, fill = drv) ) +
geom_bar(position = "fill")
ggplot(mpg, aes(x = 1, fill = drv) ) +
geom_bar(position = "fill")
# ==================================
# 문제
ggplot(mpg, aes(x = class, fill(drv))) %>%
geom_bar(position = "fill")
# ==================================
# 문제
ggplot(mpg, aes(x = class, fill(drv))) +
geom_bar(position = "fill")
# ==================================
# 문제
ggplot(mpg, aes(x = class, fill = drv)) +
geom_bar(position = "fill")
# ==================================
# 문제
ggplot(mpg, aes(x = class, fill = drv)) +
geom_bar(position = "fill") +
coord_flip()
# 막대그래프의 색상을 직접지정
mpg %>%
group_by(class) %>%
summarise(mean_cty = mean(cty))
# 막대그래프의 색상을 직접지정
mpg %>%
group_by(class) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
# 막대그래프의 색상을 직접지정
test <- mpg %>%
group_by(class) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
ggplot(test, aes(x = class, y = mean_cty)) +
geom_bar()
ggplot(test, aes(x = class, y = mean_cty)) +
geom_col()
ggplot(test, aes(x = class, y = mean_cty, fill = class)) +
geom_col()
ggplot(test, aes(x = class, y = mean_cty, fill = class)) +
geom_col() +
scale_fill_manual()
ggplot(test, aes(x = class, y = mean_cty, fill = class)) +
geom_col()
my_color = x("2seater" = "#2A4D6E",
"compact" = "#AA8F39",
"midsize" = "#AA5E39",
"minivan" = "#4A6B8A",
"pickup" = "#D4BC6A",
"subcompact" = "#D48C6A",
"suv" = "#728CA6"
)
my_color = c("2seater" = "#2A4D6E",
"compact" = "#AA8F39",
"midsize" = "#AA5E39",
"minivan" = "#4A6B8A",
"pickup" = "#D4BC6A",
"subcompact" = "#D48C6A",
"suv" = "#728CA6"
)
ggplot(test, aes(x = class, y = mean_cty, fill = class)) +
geom_col() +
scale_fill_manual(values = my_color)
library(ggplot2)
economics
eco <- as.data.frame(economics)
eco
?economics
ggplot(eco, aes(x = data, y = psavert, color = 'red')) +
geom_line()
ggplot(eco, aes(x = data, y = psavert)) +
geom_line()
eco
ggplot(eco, aes(x = date, y = psavert)) +
geom_line(color = 'red')
ggplot(eco, aes(x = date, y = psavert)) +
geom_line(color = 'blue')
seq(start, end, by = 1)
# 일별 연속 날짜 생성
start <- as.Date("1990-01-01")
end <- as.Date("2020-12-01")
seq(start, end, by = 1)
data_set1 <- seq(start, end, by = 1)
# 월별 연속 날짜 생성
seq(start, end, by = "month")
# 월별 연속 날짜 생성
date_set2 <- seq(start, end, by = "month")
date_set1 <- seq(start, end, by = 1)
rm(data_set1)
# 연별 연속 날짜 생성
seq(start, end, by = "year")
# 연별 연속 날짜 생성
date_set3 <- seq(start, end, by = "year")
# 분기별 연속 날짜 생성
date_set4 <- seq(start, end, by = "quarter")
date_set4
# 월별날짜를 이용한 시계열 그래프
date <- seq(as.Date("2000-01-01"), as.Date("2020-12-01"), by = "month")
date
runif(10)
ceiling(runif(10)*10)
ceiling(runif(10)*10)
ceiling(runif(10)*10)
table(date)
length(data)
length(date)
ceiling(runif(length(date))*10)
num <- ceiling(runif(length(date))*10)
data.frame(date, num)
df <- data.frame(date, num)
ggplot(df, aes(x = date, y = num) ) +
geom_line()
# tk상자그래프
ggplot(mpg, aes(x = drv, y = hwy)) +
geom_boxplot()
ggplot(mpg, aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(mpg, aes(x = manufacturer, y = hwy)) +
geom_boxplot()
ggplot(mpg, aes(x = manufacturer, y = hwy)) +
geom_boxplot() +
coord_flip()
# 그래프의 사용방법이 궁급하다면?
?help
