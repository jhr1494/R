group_by( manufacturer ) %>%
summarise(mean_avg = mean(avg)) %>%
arrange(desc(mean_avg)) %>%
head(10)
source('C:/Users/Hyerin/R/basic_r/code/02dplyr/script06(문제).R', encoding = 'UTF-8', echo=TRUE)
# Q03
# mpg데이터의 hwy 평균이 가장 높은 제조사 3곳을 출력하세요.
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(desc(mean_hwy))
# Q03
# mpg데이터의 hwy 평균이 가장 높은 제조사 3곳을 출력하세요.
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(desc(mean_hwy)) %>%
head(3)
mpg %>%
filter(class == "compact")
mpg %>%
filter(class == "compact") %>%
group_by(manufacturer, model) %>%
summarise(count = n()) %>%
arrange(desc(count))
mpg
# ========================================================
data.frame(fl = c("c", "d", "e", "p", "r"))
# ========================================================
data.frame(fl = c("c", "d", "e", "p", "r"),
kind = c("CNG", "diesel", "ethanol", "premium", "regular"),
price = c(2.35, 2.38, 2.11, 2.76, 2.22))
# ========================================================
fuel <- data.frame(fl = c("c", "d", "e", "p", "r"),
kind = c("CNG", "diesel", "ethanol", "premium", "regular"),
price = c(2.35, 2.38, 2.11, 2.76, 2.22))
# Q1
# 위 표를 mpg데이터에 left_join하고, 새로운 데이터를 만들어 냅니다.
left_join(mpg, fuel, by = fl)
# Q1
# 위 표를 mpg데이터에 left_join하고, 새로운 데이터를 만들어 냅니다.
left_join(mpg, fuel, by = "fl")
# Q1
# 위 표를 mpg데이터에 left_join하고, 새로운 데이터를 만들어 냅니다.
mpg_fuel <- left_join(mpg, fuel, by = "fl")
# 그 이후에 파이프라인을 사용해서
# model, fl, kind, price 데이터만 추출한 후에 앞부분 10행만 출력하세요
mpg_fuel %>%
select(model, fl, kind, price)
# 그 이후에 파이프라인을 사용해서
# model, fl, kind, price 데이터만 추출한 후에 앞부분 10행만 출력하세요
mpg_fuel %>%
select(model, fl, kind, price) %>%
head(10)
# ========================================================
# ggplot2에 존재하는 midwest데이터를 사용합니다 (미국 주 437개 지역의 인구 통계를 담고 있는 데이터 입니다)
library(ggplot2)
midwest <- as.data.frame(midwest)
str(midwest)
# Q01
# 회사별로 "suv" 자동차의 도시 및 고속도로 통합 연비 평균을 구해 내림차순으로 정렬하고, 1~10위까지 출력하세요
r1 <- mpg %>%
filter(class == "suv") %>%
mutate(avg = (cty + hwy)/2) %>%
group_by( manufacturer ) %>%
summarise(mean_avg = mean(avg)) %>%
arrange(desc(mean_avg)) %>%
head(10)
as.data.frame(r1)
# Q02
# mpg데이터의 class는 자동차 특징에 따라 분류된 변수입니다.
# class별 cty평균을 구하고 높은 순으로 정렬해 출력하세요.
r2 <- mpg %>%
group_by(class) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(mean_cty)
as.data.frame(r2)
r1
as.data.frame(r1)
# Q03
# mpg데이터의 hwy 평균이 가장 높은 제조사 3곳을 출력하세요.
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(desc(mean_hwy)) %>%
head(3)
rm(r2)
midwest
Viwe(midwest)
View(midwest)
# Q2
# popadults 는 해당 지역의 성인 인구, poptotal 은 전체 인구를 나타냅니다. midwest 데이터에
# 전체 인구 대비 성년 인구 백분율(adult_of_percent)
# 전체 인구 대비 미성년 인구 백분율(young_of_percent) 변수를 추가하세요.
# 전체 인구 대비 성년 인구 백분율공식 = (성인인구/전체인구) * 100
midwest %>%
mutate(adult_of_percent = (popadults/poptotal)*100, #전체 인구 대비 성년 인구 백분율
young_of_percent = ((poptotal-popadults)/poptotal)*100 ) #전체 인구 대비 미성년 인구 백분율
# Q2
# popadults 는 해당 지역의 성인 인구, poptotal 은 전체 인구를 나타냅니다. midwest 데이터에
# 전체 인구 대비 성년 인구 백분율(adult_of_percent)
# 전체 인구 대비 미성년 인구 백분율(young_of_percent) 변수를 추가하세요.
# 전체 인구 대비 성년 인구 백분율공식 = (성인인구/전체인구) * 100
midwest_add <- midwest %>%
mutate(adult_of_percent = (popadults/poptotal)*100, #전체 인구 대비 성년 인구 백분율
young_of_percent = ((poptotal-popadults)/poptotal)*100 ) #전체 인구 대비 미성년 인구 백분율
# Q3
# 아래 등급표에 따라 grade변수를 추가하고, 미성년인구 백분율이 가장 높은 상위 5개
# county(지역), 미성년백분율, grade를 출력하세요.
midwest_add %>%
mutate(grade = ifelse(young_of_percent >= 40, "large",
ifelse(oung_of_percent >= 20, "mid", "low")))
# Q3
# 아래 등급표에 따라 grade변수를 추가하고, 미성년인구 백분율이 가장 높은 상위 5개
# county(지역), 미성년백분율, grade를 출력하세요.
midwest_add %>%
mutate(grade = ifelse(young_of_percent >= 40, "large",
ifelse(young_of_percent >= 20, "mid", "low")))
# Q3
# 아래 등급표에 따라 grade변수를 추가하고, 미성년인구 백분율이 가장 높은 상위 5개
# county(지역), 미성년백분율, grade를 출력하세요.
midwest_add %>%
mutate(grade = ifelse(young_of_percent >= 40, "large",
ifelse(young_of_percent >= 20, "mid", "low"))) %>%
arrange(desc(young_of_percent) )
# Q3
# 아래 등급표에 따라 grade변수를 추가하고, 미성년인구 백분율이 가장 높은 상위 5개
# county(지역), 미성년백분율, grade를 출력하세요.
midwest_add %>%
mutate(grade = ifelse(young_of_percent >= 40, "large",
ifelse(young_of_percent >= 20, "mid", "low"))) %>%
arrange(young_of_percent )
# Q3
# 아래 등급표에 따라 grade변수를 추가하고, 미성년인구 백분율이 가장 높은 상위 5개
# county(지역), 미성년백분율, grade를 출력하세요.
midwest_add %>%
mutate(grade = ifelse(young_of_percent >= 40, "large",
ifelse(young_of_percent >= 30, "mid", "low"))) %>%
arrange(desc(young_of_percent) )
# Q3
# 아래 등급표에 따라 grade변수를 추가하고, 미성년인구 백분율이 가장 높은 상위 5개
# county(지역), 미성년백분율, grade를 출력하세요.
midwest_add %>%
mutate(grade = ifelse(young_of_percent >= 40, "large",
ifelse(young_of_percent >= 30, "mid", "low"))) %>%
arrange(young_of_percent )
# Q3
# 아래 등급표에 따라 grade변수를 추가하고, 미성년인구 백분율이 가장 높은 상위 5개
# county(지역), 미성년백분율, grade를 출력하세요.
midwest_add %>%
mutate(grade = ifelse(young_of_percent >= 40, "large",
ifelse(young_of_percent >= 30, "mid", "low"))) %>%
arrange(desc(young_of_percent) ) %>%
head(5)
# Q4
# popasian은 해당 지역의 아시아인 인구를 나타냅니다. '전체 인구 대비 아시아인 인구 백분율' 변수를 추가하고, 하위 10개 지역의 state(주), county(지역명), 아시아인 인구 백분율을 출력하세요.
midwest %>%
mutate(asia_of_percent = (popasian/poptotal)*100) %>%
arrange(asia_of_percent) %>%
select(state, county, asia_of_percent)
# Q4
# popasian은 해당 지역의 아시아인 인구를 나타냅니다. '전체 인구 대비 아시아인 인구 백분율' 변수를 추가하고, 하위 10개 지역의 state(주), county(지역명), 아시아인 인구 백분율을 출력하세요.
midwest %>%
mutate(asia_of_percent = (popasian/poptotal)*100) %>%
arrange(asia_of_percent) %>%
select(state, county, asia_of_percent) %>%
head(10)
# Q4
# popasian은 해당 지역의 아시아인 인구를 나타냅니다. '전체 인구 대비 아시아인 인구 백분율' 변수를 추가하고, 하위 10개 지역의 state(주), county(지역명), 아시아인 인구 백분율을 출력하세요.
midwest %>%
mutate(asia_of_percent = round((popasian/poptotal)*100,2) ) %>%
arrange(asia_of_percent) %>%
select(state, county, asia_of_percent) %>%
head(10)
# Q4
# popasian은 해당 지역의 아시아인 인구를 나타냅니다. '전체 인구 대비 아시아인 인구 백분율' 변수를 추가하고, 하위 10개 지역의 state(주), county(지역명), 아시아인 인구 백분율을 출력하세요.
midwest %>%
mutate(asia_of_percent = (popasian/poptotal)*100 ) %>%
arrange(asia_of_percent) %>%
select(state, county, asia_of_percent) %>%
head(10)
# Q3
# 아래 등급표에 따라 grade변수를 추가하고, 미성년인구 백분율이 가장 높은 상위 5개
# county(지역), 미성년백분율, grade를 출력하세요.
midwest_add %>%
mutate(grade = ifelse(young_of_percent >= 40, "large",
ifelse(young_of_percent >= 30, "mid", "low"))) %>%
arrange(desc(young_of_percent) ) %>%
head(5)
# Q3
# 아래 등급표에 따라 grade변수를 추가하고, 미성년인구 백분율이 가장 높은 상위 5개
# county(지역), 미성년백분율, grade를 출력하세요.
midwest_add %>%
mutate(grade = ifelse(young_of_percent >= 40, "large",
ifelse(young_of_percent >= 30, "mid", "low"))) %>%
arrange(desc(young_of_percent) ) %>%
select(county, young_of_percent, grade) %>%
head(5)
install.packages("stringr")
library(stringr)
?stringr
emp <- read.csv("C:\\Users\\Hyerin\\Desktop\\emp.csv")
str(emp)
View(emp)
emp <- read.csv("data/emp.csv")
emp
emp
emp
str(emp)
# str_detect(벡터형, 정규식) - 패턴검사
str_detect(emp$FIRST_NAME, "a")
str_detect(emp$FIRST_NAME, "[aA]") #a or A를 포함하는
str_detect(emp$FIRST_NAME, "^a") #a로 시작하는
str_detect(emp$FIRST_NAME, "^[aA]") #a로 시작하는
str_detect(emp$FIRST_NAME, "a$") #a로 끝나는는
str_detect(emp$FIRST_NAME, "[aA]$") #a or A로 끝나는
# str_count(벡터형, 정규식) - 출현빈도
str_count(emp$JOB_ID, "A")
str_count(emp$JOB_ID, "PROG")
# str_length(벡터)
nchar(emp$FIRST_NAME)
# str_length(벡터)
length(emp$FIRST_NAME)
str_length(emp$FIRST_NAME)
# str_c(백터, 백터, 옵션) - paste()와 동일
paste(emp$FIRST_NAME, emp$LAST_NAME)
# str_c(백터, 백터, 옵션) - paste()와 동일
paste(emp$FIRST_NAME, emp$LAST_NAME, sep = "")
# str_c(백터, 백터, 옵션) - paste()와 동일
paste(emp$FIRST_NAME, emp$LAST_NAME, sep = "_")
str_c(emp$FIRST_NAME, emp$LAST_NAME, sep = "-")
paste(emp$FIRST_NAME, collapse = ",")
# str_sub(벡터, 시작, 끝) - substr()과 동일
substr(emp$FIRST_NAME, 1, 2)
# str_sub(벡터, 시작, 끝) - substr()과 동일
substr(emp$HIRE_DATE, 1, 2)
str_sub(emp$HIRE_DATE, 1, 2)
substr(emp$HIRE_DATE, 4, nchar(emp$HIRE_DATE))
str_sub(emp$HIRE_DATE, 4)
# ★★
# str_replace(벡터, 패턴, 치환문자) - 처음매칭되는 값을 변경
str_replace(emp$PHONE_NUMBER, ".", ")")
# ★★
# str_replace(벡터, 패턴, 치환문자) - 처음매칭되는 값을 변경
str_replace(emp$PHONE_NUMBER, "4", ")")
# ★★
# str_replace(벡터, 패턴, 치환문자) - 처음매칭되는 값을 변경
str_replace(emp$PHONE_NUMBER, ".", ")")
# ★★
# str_replace(벡터, 정규식, 치환문자) - 처음매칭되는 값을 변경
str_replace(emp$PHONE_NUMBER, "\.", ")")
# ★★
# str_replace(벡터, 정규식, 치환문자) - 처음매칭되는 값을 변경
str_replace(emp$PHONE_NUMBER, "\\.", ")")
# str_replace_all()(벡터, 정규식, 치환문자) - 모든 매칭되는 값을 변경
str_replace_all(emp$PHONE_NUMBER, "\\.", "-")
str_replace_all(emp$PHONE_NUMBER, "\\.", "")
# 치환결과를 저장
emp$PHONE_NUMBER <- str_replace_all(emp$PHONE_NUMBER, "\\.", "-")
emp$PHONE_NUMBER
emp
# ===== 문제 =====
# HIRE_DATE의 타입을 확인하고 2020-01-06형식의 날짜형 데이터로 전부변경
str(emp)
as.Date.default(emp$HIRE_DATE)
as.Date(emp$HIRE_DATE)
emp %>%
str_replace_all(HIRE_DATE, "/", "-")
emp %>%
str_replace_all(HIRE_DATE, "\\/", "-")
emp %>%
str_replace_all(HIRE_DATE, "/", "\\-")
emp %>%
str_replace(HIRE_DATE, "0", "202")
emp %>%
str_replace(HIRE_DATE, "^0", "202")
as.character(emp$HIRE_DATE)
emp %>%
str_replace(HIRE_DATE, "^0", "202")
emp %>%
str_replace(HIRE_DATE, "^0", "20")
str_replace(emp$HIRE_DATE, "*[0-9]/*[0-9]/*[0-9]", "20*[0-9]/*[0-9]/*[0-9]")
str_replace(emp$HIRE_DATE, "[*0-9]/*[0-9]/*[0-9]", "20*[0-9]/*[0-9]/*[0-9]")
# ===== 문제 =====
# HIRE_DATE의 타입을 확인하고 2020-01-06형식의 날짜형 데이터로 전부변경
str(emp)
str_replace(emp$HIRE_DATE, "[*0-9]/*[0-9]/*[0-9]", "20*[0-9]/*[0-9]/*[0-9]")
str_replace(emp$HIRE_DATE, "[*0-9]/[*0-9]/[*0-9]", "20*[0-9]/*[0-9]/*[0-9]")
str_replace(emp$HIRE_DATE, "[*0-9]/[*0-9]/[*0-9]", "20[*0-9]/[*0-9]/[*0-9]")
str_replace(emp$HIRE_DATE, "[*0-9]/[*0-9]/[*0-9]", "20+[*0-9]/[*0-9]/[*0-9]")
# ===== 문제 =====
# HIRE_DATE의 타입을 확인하고 2020-01-06형식의 날짜형 데이터로 전부변경
str(emp$HIRE_DATE)
str_replace(emp$HIRE_DATE, "[*0-9]/[*0-9]/[*0-9]", "")
str_replace(emp$HIRE_DATE, "[1-9]","-" )
str_replace(emp$HIRE_DATE, "[0-9]","-" )
str_replace(emp$HIRE_DATE, "[*0-9]","-" )
str_replace(emp$HIRE_DATE, "+[0-9]","-" )
str_replace(emp$HIRE_DATE, "[*0-9]","-" )
str_replace_all(emp$HIRE_DATE, "/", "-")
str_c(20, str_replace_all(emp$HIRE_DATE, "/", "-"))
str_c(20, str_replace_all(emp$HIRE_DATE, "/", "-")) %>%
as.Date()
str_c(20, str_replace_all(emp$HIRE_DATE, "/", "-")) %>%
as.Date() %>%
str()
emp$HIRE_DATE <- as.Date(str_c(20, str_replace_all(emp$HIRE_DATE, "/", "-")))
# ===== 문제 =====
# HIRE_DATE의 타입을 확인하고 2020-01-06형식의 날짜형 데이터로 전부변경
# as.Date(), str_c(), str_replace_all()
str(emp$HIRE_DATE)
is.na(emp)
tabel(is.na(emp))
tabel(emp,is.na(emp))
data <- data.frame(id = c(1:5),
gender = c("M", "F", NA, "M", "M"),
score = c(10, 20, 30, 40, NA) )
data
mean(data$score)
# 결측치를 확인하는 함수 is.na()
is.na(data)
is.na(data$gender)
is.na(data$score)
# 데이터가 많아지면 결측치의 빈도를 확인해서 결측여부를 판별합니다
table(is.na(data$gender))
table(is.na(data$score))
# 데이터가 많아지면 결측치의 빈도를 확인해서 결측여부를 판별합니다
table(is.na(data$gender))
table(is.na(data$score))
data
# 결측치 제거
data %>%
filter(is.na(score))
# 결측치 제거
data %>%
filter(!is.na(score))
data %>%
filter(!is.na(score) & !is.na(gender))
# 모든 열에서 결측치가 하나라도 존재하면 제거 na.omit(data)
na.omit(data)
# summarise 요약 함수에서 적용
exam <- read.csv("data/excel_exam.csv")
# 인덱싱으로 결측치 삽입 exam[행,열]
exam[c(1,3,5,8,11), "math"] <- NA
exam
table(is.na(exam$math))
#1nd
exam %>%
summarise(sum_math = sum(math, na.rm = T),
mean_math = mean(math, na.rm = T))
table(is.na(exam))
ifelse(is.na(exam$math), T, F)
ifelse(is.na(exam$math), mean(exam$math, na.rm = T), exam$math)
exam$math <- ifelse(is.na(exam$math), mean(exam$math, na.rm = T), exam$math)
table(is.na(exam))
# ==================================
# 문제
library(ggplot2)
mpg <- as.data.frame(mpg)
mpg[c(65, 124, 131, 153, 212), "hwy"] <- NA
# Q1
# drv(구동방식) 별 hwy(고속도로연비) 평균이 어떻게 다른지 확인하려고 합니다.
# 결측치를 확인하고 drv, hwy 변수에 결측치가 몇 개 있는지 확인하세요.
mpg %>%
table(is.na(dry)) %>%
table(is.na(hwy))
# Q1
# drv(구동방식) 별 hwy(고속도로연비) 평균이 어떻게 다른지 확인하려고 합니다.
# 결측치를 확인하고 drv, hwy 변수에 결측치가 몇 개 있는지 확인하세요.
mpg %>%
table(is.na(drv)) %>%
table(is.na(hwy))
str(mpg)
# Q1
# drv(구동방식) 별 hwy(고속도로연비) 평균이 어떻게 다른지 확인하려고 합니다.
# 결측치를 확인하고 drv, hwy 변수에 결측치가 몇 개 있는지 확인하세요.
mpg %>%
group_by(drv) %>%
table(is.na(hwy))
# Q1
# drv(구동방식) 별 hwy(고속도로연비) 평균이 어떻게 다른지 확인하려고 합니다.
# 결측치를 확인하고 drv, hwy 변수에 결측치가 몇 개 있는지 확인하세요.
mpg %>%
group_by(drv)
# Q1
# drv(구동방식) 별 hwy(고속도로연비) 평균이 어떻게 다른지 확인하려고 합니다.
# 결측치를 확인하고 drv, hwy 변수에 결측치가 몇 개 있는지 확인하세요.
mpg %>%
group_by(drv) %>%
table(is.na(hwy), is.na(drv))
# Q1
# drv(구동방식) 별 hwy(고속도로연비) 평균이 어떻게 다른지 확인하려고 합니다.
# 결측치를 확인하고 drv, hwy 변수에 결측치가 몇 개 있는지 확인하세요.
mpg %>%
group_by(drv) %>%
table(is.na(hwy))
summarise(table(is.na(hwy))
summarise(table(is.na(hwy))
summarise(count = table(is.na(hwy))
)
# Q1
# drv(구동방식) 별 hwy(고속도로연비) 평균이 어떻게 다른지 확인하려고 합니다.
# 결측치를 확인하고 drv, hwy 변수에 결측치가 몇 개 있는지 확인하세요.
mpg %>%
group_by(drv) %>%
summarise(count = table(is.na(hwy)))
table(is.na(mpg$hwy))
# Q1
# drv(구동방식) 별 hwy(고속도로연비) 평균이 어떻게 다른지 확인하려고 합니다.
# 결측치를 확인하고 drv, hwy 변수에 결측치가 몇 개 있는지 확인하세요.
mpg %>%
group_by(drv) %>%
summarise(count_false = table(!is.na(hwy)),
count_true = table(is.na (hwy)))
summarise(count_false = filter(is.na(hwy))
)
# Q1
# drv(구동방식) 별 hwy(고속도로연비) 평균이 어떻게 다른지 확인하려고 합니다.
# 결측치를 확인하고 drv, hwy 변수에 결측치가 몇 개 있는지 확인하세요.
mpg %>%
group_by(drv) %>%
summarise(count_false = filter(is.na(hwy)))
# Q1
# drv(구동방식) 별 hwy(고속도로연비) 평균이 어떻게 다른지 확인하려고 합니다.
# 결측치를 확인하고 drv, hwy 변수에 결측치가 몇 개 있는지 확인하세요.
mpg %>%
group_by(drv) %>%
filter(is.na(hwy)) %>%
summarise(count = n())
table(is.na(mpg))
# Q2
# filter() 를 이용해서 결측치를 제거하고 어떤 구동 방식 평균이 높은지 그룹별로 확인하고 차순정렬하세요
mpg %>%
group_by(dvr) %>%
filter(!is.na)
# Q2
# filter() 를 이용해서 결측치를 제거하고 어떤 구동 방식 평균이 높은지 그룹별로 확인하고 차순정렬하세요
mpg %>%
group_by(drv) %>%
filter(!is.na)
table(is.na(mpg$drv))
# Q2
# filter() 를 이용해서 결측치를 제거하고 어떤 구동 방식 평균이 높은지 그룹별로 확인하고 차순정렬하세요
mpg %>%
group_by(drv) %>%
filter(!is.na(hwy))
# Q2
# filter() 를 이용해서 결측치를 제거하고 어떤 구동 방식 평균이 높은지 그룹별로 확인하고 차순정렬하세요
mpg %>%
group_by(drv) %>%
filter(!is.na(hwy)) %>%
summarise(avg = mean(hwy)) %>%
arrange(avg)
# Q2
# filter() 를 이용해서 결측치를 제거하고 어떤 구동 방식 평균이 높은지 그룹별로 확인하고 차순정렬하세요
mpg %>%
group_by(drv) %>%
filter(!is.na(hwy)) %>%
summarise(avg = mean(hwy)) %>%
arrange(desc(avg))
data.frame(gender = c(1, 2, 1, 1, 3),
score = c(12, 43, 65, 54, 23))
d1 <- data.frame(gender = c(1, 2, 1, 1, 3),
score = c(12, 43, 65, 54, 23))
d1
table(d1$gender) #일반적인 빈도보다 확연히 적다면, 이상치로 판단합니다다
# 이상치를 NA값으로 변경
d1$gender <- ifelse(d1$gender == 3, NA, d1$gender)
d1
summarise(gender_mean = mean(score))
# NA값을 제거하고 분석
d1 %>%
filter(is.na(gender)) %>%
group_by(gender) %>%
summarise(gender_mean = mean(score))
# NA값을 제거하고 분석
d1 %>%
filter(!is.na(gender)) %>%
group_by(gender) %>%
summarise(gender_mean = mean(score))
boxplot(mpg$hwy)
boxplot(mpg$hwy)$stats
# 극단치 경계가 12, 37이기 때문에 초과, 미만데이터는 NA처리
ifelse(mpg$hwy < 12 | mpg$hwy > 37, NA, mpg%hwy)
# 극단치 경계가 12, 37이기 때문에 초과, 미만데이터는 NA처리
mpg$hwy <- ifelse(mpg$hwy < 12 | mpg$hwy > 37, NA, mpg$hwy)
table(is.na(mpg$hwy))
mpg <- as.data.frame(mpg)
table(is.na(mpg$hwy))
rm(mpg)
mpg <- as.data.frame(mpg)
table(is.na(mpg$hwy))
# 극단치 경계가 12, 37이기 때문에 초과, 미만데이터는 NA처리
mpg$hwy <- ifelse(mpg$hwy < 12 | mpg$hwy > 37, NA, mpg$hwy)
table(is.na(mpg$hwy))
# NA는 제거후에 분석
mpg %>%
filter(!is.na(mpg)) %>%
group_by(drv) %>%
summarise(mean_der = mean(hwy))
mpg$hwy <- ifelse(mpg$hwy < 12 | mpg$hwy > 37, NA, mpg$hwy)
table(is.na(mpg$hwy))
# NA는 제거후에 분석
mpg %>%
filter(!is.na(mpg)) %>%
group_by(drv) %>%
summarise(mean_der = mean(hwy))
# NA는 제거후에 분석
mpg %>%
filter(!is.na(hwy)) %>%
group_by(drv) %>%
summarise(mean_der = mean(hwy))
